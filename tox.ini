[tox]
envlist =
    etl
    nbval
    validate
    docs
    flake8
    doc8
    pre-commit
    bandit
    linters
    travis
    build
    release

[testenv]
whitelist_externals =
    bash
# shared directory for re-used packages
envdir = {toxinidir}/.env_pudl
passenv =
    CI
    TRAVIS
    TRAVIS_*

[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-docstrings
    flake8-builtins
    pep8-naming
    pydocstyle
commands =
    flake8 --format="%(path)40s:%(row)-4d %(code)s %(text)s" src/pudl/ test/ setup.py --exclude anomaly_screening.py,package_data

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 --ignore-path docs/ferc/form1 --ignore-path docs/_build docs/

[testenv:pre-commit]
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test

[testenv:bandit]
skip_install = true
deps =
    bandit
commands =
    bandit -r src/pudl/ -c .bandit.yml

# Run some automated code quality control checks:
[testenv:linters]
skip_install = true
deps =
    {[testenv:pre-commit]deps}
    {[testenv:bandit]deps}
    {[testenv:flake8]deps}
commands =
    {[testenv:pre-commit]commands}
    {[testenv:bandit]commands}
    {[testenv:flake8]commands}

# Test the ETL processing pipeline:
[testenv:etl]
extras =
    test
commands =
    pytest {posargs} --disable-warnings --log-cli-level=info --log-cli-format="%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s" --log-date-format="%Y-%m-%d %H:%M:%S" --cov-report=term --cov-report=xml --cov-config=.coveragerc --cov={envsitepackagesdir}/pudl test/etl_test.py test/glue_test.py test/fast_output_test.py


# Data validation tests
[testenv:validate]
skip_install = false
extras =
    test
commands =
    pytest --disable-warnings --live_pudl_db=AUTO --live_ferc1_db=AUTO --pudl_in=AUTO --pudl_out=AUTO test/validate

# Notebook validation tests
[testenv:nbval]
skip_install = false
extras =
    {[testenv:validate]extras}
commands =
    pytest --disable-warnings -sv --nbval-lax  src/pudl/package_data/notebooks test/notebooks devtools notebooks/examples

# Test building the Sphinx docs:
[testenv:docs]
skip_install = false
deps =
    {[testenv:doc8]deps}
extras =
    doc
commands =
    # Remove the old docs build output to start fresh:
    bash -c 'rm -rf docs/_build'
    # Generate autodoc based entries for all the modules, excluding:
    # * package_data (which is not actually code)
    # * the graveyard pudl.analysis.analysis module
    # * the not ready pudl.glue.zipper module
    sphinx-apidoc --separate --output-dir docs/api src/pudl "src/pudl/package_data/*" "src/pudl/analysis/analysis.py" "src/pudl/glue/zipper.py" "src/pudl/analysis/anomaly_screening.py"
    {[testenv:doc8]commands}
    sphinx-build -W -b html docs docs/_build/html
    #sphinx-build -b latex docs docs/_build/latex
    #sphinx-build -b epub docs docs/_build/epub

[testenv:scripts]
skip_install = false
commands =
    bash -c 'pudl_setup --help > /dev/null'
    bash -c 'pudl_data --help > /dev/null'
    bash -c 'ferc1_to_sqlite --help > /dev/null'
    bash -c 'pudl_etl --help > /dev/null'
    bash -c 'datapkg_to_sqlite --help > /dev/null'
    bash -c 'epacems_to_parquet --help > /dev/null'

[testenv:travis]
skip_install = false
extras =
    {[testenv:docs]extras}
    {[testenv:etl]extras}
deps =
    {[testenv:linters]deps}
commands =
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:etl]commands}
    {[testenv:scripts]commands}

# Release tooling
[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
    setuptools_scm
commands =
    bash -c 'rm -rf build/* dist/*'
    python setup.py sdist bdist_wheel

[testenv:testrelease]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --repository testpypi --skip-existing dist/*

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --skip-existing dist/*
